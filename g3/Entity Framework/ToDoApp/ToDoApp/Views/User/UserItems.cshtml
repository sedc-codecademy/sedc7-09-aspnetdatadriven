@using ViewModels
@model ViewModels.UserViewModel
@{
    ViewData["Title"] = "UserItems";
    var emptyToDoItem = new ToDoItemViewModel();
}

<h3>Hi @Model.FullName!</h3>
<h5>This is your TODO list:</h5>

<partial name="../Item/_AddItem.cshtml" model="@emptyToDoItem"/>
<hr/>
<form asp-action="Update" asp-controller="Item">
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.Email)
    @for (var i = 0; i < Model.ToDoItems.Count; i++)
    {
        var style = Model.ToDoItems[i].Completed ? "text-decoration-line: line-through;" : string.Empty;
        <div class="form-group row">
            @Html.HiddenFor(x => Model.ToDoItems[i].Id)
            <input asp-for="@Model.ToDoItems[i].Completed" class="form-control col-lg-1"/>
            <input asp-for="@Model.ToDoItems[i].Name" class="form-control col-lg-11" disabled="disabled" style="@style"/>
        </div>
    }

    <input type="submit" value="Save" class="btn btn-primary" />
</form>

